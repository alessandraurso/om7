(in-package :om)
;(om-midi::portmidi-connect-ports (om-midi::portmidi-setup nil nil))
;(load-om-projects '("improtek"))
(defun test-wait-for-relay ()
  (print "---------------------------------------------")
  (print "--------Starting Wait-for-relay Test---------")
  (print "---------------------------------------------")
  (let* ((improhandler (build-improvisation-handler :name "Hey"
                                            :scenario *scenario-degeu*
                                            :rtimprovizer (ImprovizerExBeat->MidiHarmBeat (load-realtimeImprovizer-fromSavedImprovizer *db-path-solo1*))
                                            :output-fun #'(lambda (chunk start-index start-date handler target) 
                                                            (output-sequence chunk start-index start-date handler target))))
         (query1 (query-alloc :handler improhandler :gen-start 18))
         (query2 (query-alloc :handler improhandler :gen-start 22))
         (query3 (query-alloc :handler improhandler :gen-start 43))
         (query4 (query-alloc :handler improhandler :gen-start 72))
         (query5 (query-alloc :handler improhandler :gen-start 1))
         (query6 (query-alloc :handler improhandler :gen-start 122))
         (querychiante (query-alloc :handler improhandler :gen-start 43)))

    (setq *testimp* improhandler)
    ;(query-push query1)
    ;(query-push query3)
    ;(query-push query2)
    ;(query-push query4)
    ;(query-push query5)
    ;(query-push query6)
    ;(query-push querychiante)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 1 4)) 18)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 1 4)) 43)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 1 4)) 22)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 90 100)) 72)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 90 100)) 1)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 90 100)) 122)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 90 100)) 43)


    ;(sleep 10)
    ;(print "---------------------------------------------")
    ;(print "--------Finished Wait-for-relay Test---------")
    ;(print "---------------------------------------------")
    ;(q-output query2)
    ))

(defmethod testimpropatch ((self improvisation-handler))
  (print "---------------------------------------------")
  (print "--------Starting Wait-for-relay Test---------")
  (print "---------------------------------------------")
  (setq *testout* nil)
  (let* ((improhandler self)
         (query1 (query-alloc :handler improhandler :gen-start 18))
         (query2 (query-alloc :handler improhandler :gen-start 22))
         (query3 (query-alloc :handler improhandler :gen-start 43))
         (query4 (query-alloc :handler improhandler :gen-start 72))
         (query5 (query-alloc :handler improhandler :gen-start 1))
         (query6 (query-alloc :handler improhandler :gen-start 122))
         (querychiante (query-alloc :handler improhandler :gen-start 43)))

    (setq *testimp* improhandler)
    ;(query-push query1)
    ;(query-push query3)
    ;(query-push query2)
    ;(query-push query4)
    ;(query-push query5)
    ;(query-push query6)
    ;(query-push querychiante)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 1 4)) 18)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 1 4)) 43)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 1 4)) 22)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 90 100)) 72)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 90 100)) 1)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 90 100)) 122)
    (set-improvizer-param improhandler '(max-continuity) (list (om-random 90 100)) 43)


    ;(sleep 10)
    ;(print "---------------------------------------------")
    ;(print "--------Finished Wait-for-relay Test---------")
    ;(print "---------------------------------------------")
    ;(q-output query2)
    ))
