<?xml version="1.0" encoding="UTF-8"?>
<documentation single-page-p="yes" index-title="CL-PortAudio references" css="index.css" heading="CL-PortAudio"><package name="portaudio" id="portaudio"><documentation-string>This package contains bindings to <a a="http://portaudio.com/">PortAudio</a>. PortAudio is a free, cross-platform, open-source, audio I/O library.<break/>
Binary PortAudio packages can be founded here: <a>http://planet.plt-scheme.org/display.ss?package=portaudio.plt&amp;owner=clements</a> -&gt; source browse -&gt; directories lib<break/><section section="Installation and Usage"><pre>
git clone --depth 1 https://github.com/filonenko-mikhail/cl-portaudio.git
emacs
M+x slime
  (ql:quickload :cl-portaudio)
  (ql:quickload :cl-portaudio-tests)
  (portaudio-tests:test-read-write-echo)</pre></section><break/><section section="Example"><pre>
 (use-package :portaudio)<break/>
 (defconstant +frames-per-buffer+ 1024)
 (defconstant +sample-rate+ 44100d0)
 (defconstant +seconds+ 15)
 (defconstant +sample-format+ :float)
 (defconstant +num-channels+ 2)<break/>
 (defun test-read-write-converted-echo ()
  "Record input into an array; Separate array to channels; Merge channels into array; Play last array." 
  (with-audio
    (format t "~%=== Wire on. Will run ~D seconds . ===~%" +seconds+) 
    (with-default-audio-stream (astream +num-channels+ +num-channels+ :sample-format +sample-format+ :sample-rate +sample-rate+ :frames-per-buffer +frames-per-buffer+) 
      (dotimes (i (round (/ (* +seconds+ +sample-rate+) +frames-per-buffer+)))
         (write-stream astream
                                    (merge-channels-into-array astream
                                                               (separate-array-to-channels astream
                                                                                           (read-stream astream))))))))</pre><break/><aboutfun>with-audio</aboutfun><aboutfun>with-default-audio-stream</aboutfun><aboutfun>read-stream</aboutfun><aboutfun>separate-array-to-channels</aboutfun><aboutfun>merge-channels-into-array</aboutfun><aboutfun>write-stream</aboutfun><break/><b>Note</b>
ignore-errors is used for ignoring output-underflowed error.<break/></section><section section="Introduction">
PortAudio provides a uniform application programming interface (API) across all supported platforms. You can think of the PortAudio library as a wrapper that converts calls to the PortAudio API into calls to platform-specific native audio APIs. Operating systems often offer more than one native audio API and some APIs (such as JACK) may be available on multiple target operating systems. PortAudio supports all the major native audio APIs on each supported platform. The diagram below illustrates the relationship between your application, PortAudio, and the supported native audio APIs:<break/><a a="./img/portaudio-external-architecture-diagram.png">Image</a><break/>
PortAudio provides a uniform interface to native audio APIs. However, it doesn't always provide totally uniform functionality. There are cases where PortAudio is limited by the capabilities of the underlying native audio API. For example, PortAudio doesn't provide sample rate conversion if you request a sample rate that is not supported by the native audio API. Another example is that the ASIO SDK only allows one device to be open at a time, so PortAudio/ASIO doesn't currently support opening multiple ASIO devices simultaneously.</section><section section="Key abstractions: Host APIs, Devices and Streams">
The PortAudio processing model includes three main abstractions: Host APIs, audio Devices and audio Streams.<break/>
Host APIs represent platform-specific native audio APIs. Some examples of Host APIs are Core Audio on Mac OS, WMME and DirectSound on Windows and OSS and ALSA on Linux. The diagram in the previous section shows many of the supported native APIs. Sometimes it's useful to know which Host APIs you're dealing with, but it is easy to use PortAudio without ever interacting directly with the Host API abstraction.<break/>
Devices represent individual hardware audio interfaces or audio ports on the host platform. Devices have names and certain capabilities such as supported sample rates and the number of supported input and output channels. PortAudio provides functions to enumerate available Devices and to query for Device capabilities.<break/>
Streams manage active audio input and output from and to Devices. Streams may be half duplex (input or output) or full duplex (simultaneous input and output). Streams operate at a specific sample rate with particular sample formats, buffer sizes and internal buffering latencies. You specify these parameters when you open the Stream. Audio data is communicated between a Stream and your application via a user provided asynchronous callback function or by invoking synchronous read and write functions.<break/>
PortAudio supports audio input and output in a variety of sample formats: 8, 16, 24 and 32 bit integer formats and 32 bit floating point, irrespective of the formats supported by the native audio API. PortAudio also supports multichannel buffers in both interleaved and non-interleaved (separate buffer per channel) formats and automatically performs conversion when necessary. If requested, PortAudio can clamp out-of range samples and/or dither to a native format.<break/>
The PortAudio API offers the following functionality:<itemize><item>Initialize and terminate the library</item><item>Enumerate available Host APIs</item><item>Enumerate available Devices either globally, or within each Host API</item><item>Discover default or recommended Devices and Device settings</item><item>Discover Device capabilities such as supported audio data formats and sample rates</item><item>Create and control audio Streams to acquire audio from and output audio to Devices</item><item>Provide Stream timing information to support synchronising audio with other parts of your application</item><item>Retrieve version and error information.</item></itemize>
These functions are described in more detail below.<break/></section><section section="Initialisation, termination and utility functions">The PortAudio library must be initialized before it can be used and terminated to clean up afterwards. You initialize PortAudio by calling <fun id="portaudio__fun__initialize">initialize</fun> and clean up by calling <fun id="portaudio__fun__terminate">terminate</fun>. There is <fun id="portaudio__fun__with-audio">with-audio</fun> macro that does environment.<break/>You can query PortAudio for version information using <fun id="portaudio__fun__get-version">get-version</fun> to get a numeric version number and <fun id="portaudio__fun__get-version-text">get-version-text</fun> to get a string.<break/>The size in bytes of the various sample formats represented by the sample-format enumeration can be obtained using <fun id="portaudio__fun__get-sample-size">get-sample-size</fun>.<break/><fun id="portaudio__fun__pa-sleep">pa-sleep</fun> sleeps for a specified number of milliseconds. This isn't intended for use in production systems; it's provided only as a simple portable way to implement tests and examples where the main thread sleeps while audio is acquired or played by an asynchronous callback function.</section><section section="Host APIs">
A Host API acts as a top-level grouping for all of the Devices offered by a single native platform audio API. Each Host API has a unique type identifier, a name, zero or more Devices, and nominated default input and output Devices.<break/>Host APIs are usually referenced by index: an integer of type host-api-index that ranges between zero and <code>(- (<fun id="portaudio__fun__get-host-api-count">get-host-api-count</fun>) 1)</code>. You can enumerate all available Host APIs by counting across this range.<break/>You can retrieve the index of the default Host API by calling <fun id="portaudio__fun__get-default-host-api">get-default-host-api</fun>.<break/>Information about a Host API, such as it's name and default devices, is stored in a <class id="portaudio__class__host-api-info">host-api-info</class> structure. You can retrieve a pointer to a particular Host API's <class id="portaudio__class__host-api-info">host-api-info</class> structure by calling <fun id="portaudio__fun__get-host-api-info">get-host-api-info</fun> with the Host API's index as a parameter.<break/>Most PortAudio functions reference Host APIs by <fun id="portaudio__fun__host-api-index">host-api-index</fun> indices. Each Host API also has a unique type identifier defined in the host-api-type-id enumeration. You can call <fun id="portaudio__fun__host-api-type-id-to-host-api-index">host-api-type-id-to-host-api-index</fun> to retrieve the current host-api-index for a particular host-api-type-id.</section><section section="Devices">
A Device represents an audio endpoint provided by a particular native audio API. This usually corresponds to a specific input or output port on a hardware audio interface, or to the interface as a whole. Each Host API operates independently, so a single physical audio port may be addressable via different Devices exposed by different Host APIs.<break/>A Device has a name, is associated with a Host API, and has a maximum number of supported input and output channels. PortAudio provides recommended default latency values and a default sample rate for each Device. To obtain more detailed information about device capabilities you can call <fun id="portaudio__fun__is-format-supported">is-format-supported</fun> to query whether it is possible to open a Stream using particular Devices, parameters and sample rate.<break/>Although each Device conceptually belongs to a specific Host API, most PortAudio functions and data structures refer to Devices using a global, Host API-independent index of type device-index â€“ an integer of that ranges between zero and <code>(- (<fun id="portaudio__fun__get-device-count">get-device-count</fun>) 1)</code>. The reasons for this are partly historical but it also makes it easy for applications to ignore the Host API abstraction and just work with Devices and Streams.<break/>If you want to enumerate Devices belonging to a particular Host API you can count between 0 and <code>(- (<fun id="portaudio__fun__host-api-info-device-count">host-api-info-device-count</fun>) 1)</code>. You can convert this Host API-specific index value to a global device-index value by calling <fun id="portaudio__fun__host-api-device-index-to-device-index">host-api-device-index-to-device-index</fun>.<break/>Information about a Device is stored in a PaDeviceInfo structure. You can retrieve <class id="portaudio__class__device-info">device-info</class> structure by calling <fun id="portaudio__fun__get-device-info">get-device-info</fun> with the Device's index as a parameter.<break/>You can retrieve the indices of the global default input and output devices using <fun id="portaudio__fun__get-default-input-device">get-default-input-device</fun> and <fun id="portaudio__fun__get-default-output-device">get-default-output-device</fun>. Default Devices for each Host API are stored in the Host API's <class id="portaudio__class__host-api-info">host-api-info</class> structures.<break/>For an example of enumerating devices and printing information about their capabilities see the <fun id="portaudio__fun__print-devices">print-devices</fun> function.</section><section section="Streams">
A Stream represents an active flow of audio data between your application and one or more audio Devices. A Stream operates at a specific sample rate with specific sample formats and buffer sizes.</section><section section="Opening and Closing Streams">You call <fun id="portaudio__fun__open-stream">open-stream</fun> to open a Stream, specifying the Device(s) to use, the number of input and output channels, sample formats, suggested latency values and flags that control dithering, clipping and overflow handling. You specify many of these parameters in two <class id="portaudio__class__stream-parameters">stream-parameters</class> structures, one for input and one for output.<break/>Devices may be full duplex (supporting simultaneous input and output) or half duplex (supporting input or output) â€“ usually this reflects the structure of the underlying native audio API. When opening a Stream you can specify one full duplex Device for both input and output, or two different Devices for input and output. Some Host APIs only support full-duplex operation with a full-duplex device (e.g. ASIO) but most are able to aggregate two half duplex devices into a full duplex Stream. PortAudio requires that all devices specified in a call to <fun id="portaudio__fun__open-stream">open-stream</fun> belong to the same Host API.<break/>A successful call to <fun id="portaudio__fun__open-stream">open-stream</fun> creates a pointer to a <class id="portaudio__class__pa-stream">pa-stream</class> â€“ an opaque handle representing the open Stream. All PortAudio API functions that operate on open Streams take a pointer to a <class id="portaudio__class__pa-stream">pa-stream</class> as their first parameter.<break/>PortAudio also provides <fun id="portaudio__fun__open-default-stream">open-default-stream</fun> â€“ a simpler alternative to <fun id="portaudio__fun__open-stream">open-stream</fun> which you can use when you want to open the default audio Device(s) with default latency parameters.<break/>You call <fun id="portaudio__fun__close-stream">close-stream</fun> close a Stream when you've finished using it.<break/>There are two macros to simplify work with stream: <fun id="portaudio__fun__with-audio-stream">with-audio-stream</fun> and <fun id="portaudio__fun__with-default-audio-stream">with-default-audio-stream</fun>. These macros open and start stream at the beginning and stop and close stream at the end. Body is protected by unwind-protect.</section><section section="Starting and Stopping Streams">Newly opened Streams are initially stopped. You call <fun id="portaudio__fun__start-stream">start-stream</fun> to start a Stream. You can stop a running Stream using <fun id="portaudio__fun__stop-stream">stop-stream</fun> or <fun id="portaudio__fun__abort-stream">abort-stream</fun> (the Stop function plays out all internally queued audio data, while Abort tries to stop as quickly as possible). An open Stream can be started and stopped multiple times. You can call <fun id="portaudio__fun__is-stream-stopped">is-stream-stopped</fun> to query whether a Stream is running or stopped.</section><section section="The Read/Write I/O Method">
PortAudio provides a synchronous read/write interface for acquiring and playing audio.<break/>To write audio data to a Stream call <fun id="portaudio__fun__write-stream">write-stream</fun> and to read data call <fun id="portaudio__fun__read-stream">read-stream</fun>. These functions will block if the internal buffers are full, making them safe to call in a tight loop. If you want to avoid blocking you can query the amount of available read or write space using <fun id="portaudio__fun__get-stream-read-available">get-stream-read-available</fun> or <fun id="portaudio__fun__get-stream-write-available">get-stream-write-available</fun>.<break/>For examples of the read/write I/O method see the following examples in the /t directory of the PortAudio distribution: tests.lisp (<fun id="portaudio-tests__fun__test-read-write-converted-echo">portaudio-tests:test-read-write-converted-echo</fun>).</section><section section="Retreiving Stream Information">You can retrieve information about an open Stream by calling <fun id="portaudio__fun__get-stream-info">get-stream-info</fun>. This returns a <class id="portaudio__class__stream-info">stream-info</class> structure containing the actual input and output latency and sample rate of the stream. It's possible for these values to be different from the suggested values passed to <fun id="portaudio__fun__open-stream">open-stream</fun>.</section><section section="Error Handling">
Most PortAudio functions invokes signal. Possible conditions are described in pa-error enum. Some functions return values greater than or equal to zero for normal results.<break/>PortAudio usually tries to translate error conditions into portable pa-error error codes. However if an unexpected error is encountered the unanticipated-host-error code may be returned. In this case a further mechanism is provided to query for Host API-specific error information. If PortAudio throws unanticipated-host-error you can call <fun id="portaudio__fun__get-last-host-error-info">get-last-host-error-info</fun> to retrieve a <class id="portaudio__class__host-error-info">host-error-info</class> structure that provides more information, including the Host API that encountered the error, a native API error code and error text.</section><section section="Conditions">
There are conditions, that are translated from PaError.<itemize>  <item>not-anticipated</item>  <item>unanticipated-host-error</item>  <item>invalid-channel-count</item>  <item>invalid-sample-rate</item>  <item>invalid-device</item>  <item>invalid-flag</item>  <item>sample-format-not-supported</item>  <item>bad-i-o-device-combination</item>  <item>insufficient-memory</item>  <item>buffer-too-big</item>  <item>buffer-too-small</item>  <item>null-callback</item>  <item>bad-stream-ptr</item>  <item>timed-out</item>  <item>internal-error</item>  <item>device-unavailable</item>  <item>incompatible-host-api-specific-stream-info</item>  <item>stream-is-stopped</item>  <item>stream-is-not-stopped</item>  <item>input-overflowed</item>  <item>output-underflowed</item>  <item>host-api-not-found</item>  <item>invalid-host-api</item>  <item>can-not-read-from-a-callback-stream</item>  <item>can-not-write-to-a-callback-stream</item>  <item>can-not-read-from-an-output-only-stream</item>  <item>can-not-write-to-an-input-only-stream</item>  <item>incompatible-stream-host-api</item>  <item>bad-buffer-ptr</item>  </itemize></section><section section="Bitfields">  <b>sample-format</b>  <itemize>  <item>:float</item>  </itemize>  <b>stream-flags</b>  <itemize>  <item>:no-flag</item>  <item>:clip-off</item>  <item>:dither-off</item>  </itemize></section><section section="Enums">  <b>host-api-type-id</b>  <itemize>  <item>:in-development</item>  <item>:direct-sound</item>  <item>:mme</item>  <item>:asio</item>  <item>:sound-manager</item>  <item>:core-audio</item>  <item>:oss</item>  <item>:alsa</item>  <item>:al</item>  <item>:be-os</item>  <item>:wdmks</item>  <item>:jack</item>  <item>:wasapi</item>  <item>:audio-science-hpi</item>  </itemize></section></documentation-string><external-symbols><function-definition id="portaudio__fun__host-api-device-index-to-device-index" name="host-api-device-index-to-device-index" package="portaudio"><lambda-list><elt>host-api</elt><elt>host-api-device-index</elt></lambda-list><documentation-string>Convert a host-API-specific device index to standard PortAudio device index. This function may be used in conjunction with the deviceCount field of PaHostApiInfo to enumerate all devices for the specified host API.<break/><arg arg="host-api">A valid host API index ranging from 0 to <code>(- (<fun id="portaudio__fun__get-host-api-count">get-host-api-count</fun>) 1)</code></arg><arg arg="host-api-device-index">A valid per-host device index in the range 0 to <code>(- (<fun id="portaudio__fun__host-api-info-device-count">host-api-info-device-count</fun> (<fun id="portaudio__fun__get-host-api-info">get-host-api-info</fun> host-api)) 1)</code></arg><break/><return>A non-negative index ranging from 0 to <code>(- (<fun id="portaudio__fun__get-device-count">get-device-count</fun>) 1)</code> or, raises an error if PortAudio is not initialized or an error is encountered.</return><break/>
A invalid-host-api error indicates that the host API index specified by the hostApi parameter is out of range.<break/>
A invalid-device error indicates that the host-api-device-index parameter is out of range.</documentation-string></function-definition><function-definition id="portaudio__fun__pa-sleep" name="pa-sleep" package="portaudio"><lambda-list><elt>msec</elt></lambda-list><documentation-string>
Put the caller to sleep for at least 'msec' milliseconds. This function is provided only as a convenience for authors of portable code (such as the tests and examples in the PortAudio distribution.)<break/>
The function may sleep longer than requested so don't rely on this for accurate musical timing.</documentation-string></function-definition><function-definition id="portaudio__fun__is-stream-active" name="is-stream-active" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list><documentation-string>Determine whether the stream is active. A stream is active after a successful call to <fun id="portaudio__fun__start-stream">start-stream</fun>, until it becomes inactive either as a result of a call to <fun id="portaudio__fun__stop-stream">stop-stream</fun> or <fun id="portaudio__fun__abort-stream">abort-stream</fun>. In the latter case, the stream is considered inactive after the last buffer has finished playing.<break/><return>
Returns one (1) when the stream is active (ie playing or recording audio), zero (0) when not playing or, raises an error if PortAudio is not initialized or an error is encountered.</return></documentation-string></function-definition><function-definition id="portaudio__fun__start-stream" name="start-stream" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list><documentation-string>Commences audio processing.</documentation-string></function-definition><function-definition id="portaudio__fun__device-info-name" name="device-info-name" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>device name</documentation-string></function-definition><class-definition id="portaudio__class__stream-info" name="stream-info" package="portaudio"><cpl><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string>A structure containing unchanging information about an open stream.</documentation-string></class-definition><function-definition id="portaudio__fun__device-info-default-high-output-latency" name="device-info-default-high-output-latency" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string></documentation-string></function-definition><function-definition id="portaudio__fun__device-info-host-api" name="device-info-host-api" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>note this is a host API index, not a type id.</documentation-string></function-definition><function-definition id="portaudio__fun__host-api-info-type" name="host-api-info-type" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>The well known unique identifier of this host API.</documentation-string></function-definition><class-definition id="portaudio__class__host-error-info" name="host-error-info" package="portaudio"><cpl><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string>Structure used to return information about a host error condition.</documentation-string></class-definition><function-definition id="portaudio__fun__host-api-info-name" name="host-api-info-name" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>A textual description of the host API for display on user interfaces.</documentation-string></function-definition><function-definition id="portaudio__fun__get-device-count" name="get-device-count" package="portaudio"><lambda-list/><documentation-string>Retrieve the number of available devices.The number of available devices may be zero.<return>
A non-negative value indicating the number of available devices or, raises an error if PortAudio is not initialized or an error is encountered. </return></documentation-string></function-definition><function-definition id="portaudio__fun__host-error-info-host-api-type" name="host-error-info-host-api-type" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>the host API which returned the error code</documentation-string></function-definition><function-definition id="portaudio__fun__stream-parameters-suggested-latency" name="stream-parameters-suggested-latency" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>The desired latency in seconds. Where practical, implementations should configure their latency based on these parameters, otherwise they may choose the closest viable latency instead. Unless the suggested latency is greater than the absolute upper limit for the device implementations should round the suggestedLatency up to the next practical value - ie to provide an equal or higher latency than suggestedLatency wherever possible.</documentation-string></function-definition><function-definition id="portaudio__fun__stream-parameters-device" name="stream-parameters-device" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>A valid device index in the range 0 to <code>(- (<fun id="portaudio__fun__get-device-count">get-device-count</fun>) 1)</code> specifying the device to be used. This field must not be set to paNoDevice.</documentation-string></function-definition><function-definition id="portaudio__fun__get-version-text" name="get-version-text" package="portaudio"><lambda-list/><documentation-string>Retrieve a textual description of the current PortAudio build,eg "PortAudio V19-devel 13 October 2002".</documentation-string></function-definition><function-definition id="portaudio__fun__write-stream" name="write-stream" package="portaudio"><lambda-list><elt>pa-stream</elt><elt>buffer</elt></lambda-list><documentation-string>Write samples to an output stream. This function doesn't return until the entire buffer has been consumed - this may involve waiting for the operating system to consume the data. Size of buffer should be equal to <code>(* frames-per-buffer channel-count)</code>.<break/><arg arg="pa-stream">A object of stream previously created with <fun id="portaudio__fun__open-stream">open-stream</fun>.</arg><arg arg="buffer">A array of sample frames. The buffer contains samples in the format specified by the <code>(stream-parameters-sample-format output-parameters)</code> field used to open the stream, and the number of channels specified by <code>(stream-parameters-num-channels output-parameters)</code>.</arg><break/><return>
On success NIL will be returned, or :output-underflowed if additional output data was inserted after the previous call and before this call. </return></documentation-string></function-definition><function-definition id="portaudio__fun__get-default-host-api" name="get-default-host-api" package="portaudio"><lambda-list/><documentation-string>Retrieve the index of the default host API. The default host API will be the lowest common denominator host API on
 the current platform and is unlikely to provide the best performance.<break/><return>A non-negative value ranging from 0 to <code>(- (<fun id="portaudio__fun__get-host-api-count">get-host-api-count</fun>) 1)</code> indicating the default host API index or, raises an error if PortAudio is not initialized or an error is encountered. </return></documentation-string></function-definition><function-definition id="portaudio__fun__get-default-output-device" name="get-default-output-device" package="portaudio"><lambda-list/><documentation-string>Retrieve the index of the default output device. The result can be used in the outputDevice parameter to <fun id="portaudio__fun__open-stream">open-stream</fun>.<break/><b>Note</b><break/>
On the PC, the user can specify a default device by setting an environment variable. For example, to use device #1.<break/><pre>set PA_RECOMMENDED_OUTPUT_DEVICE=1</pre><break/>The user should first determine the available device ids by using <code>(<fun id="portaudio__fun__print-devices">print-devices</fun>)</code>. <break/><return>
The default output device index for the default host API, or raise no-device if no default output device is available or an error was encountered.</return></documentation-string></function-definition><function-definition id="portaudio__fun__device-info-default-low-output-latency" name="device-info-default-low-output-latency" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string></documentation-string></function-definition><function-definition id="portaudio__fun__get-sample-size" name="get-sample-size" package="portaudio"><lambda-list><elt>format</elt></lambda-list><documentation-string>Retrieve the size of a given sample format in bytes.<result>The size in bytes of a single sample in the specified format, or paSampleFormatNotSupported if the format is not supported.</result></documentation-string></function-definition><class-definition id="portaudio__class__stream-parameters" name="stream-parameters" package="portaudio"><cpl><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string>Parameters for one direction (input or output) of a stream.</documentation-string></class-definition><function-definition id="portaudio__fun__get-stream-time" name="get-stream-time" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list><documentation-string>Returns valid time values for the entire life of the stream, from when the stream is opened until it is closed. Starting and stopping the stream does not affect the passage of time returned by get-stream-time.<break/>
This time may be used for synchronizing other events to the audio stream, for example synchronizing audio to MIDI.<break/><result>The stream's current time in seconds, or 0 if an error occurred.</result></documentation-string></function-definition><function-definition id="portaudio__fun__read-stream" name="read-stream" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list><documentation-string>Read samples from an input stream. The function doesn't return until the entire buffer has been filled - this may involve waiting for the operating system to supply the data. Size of returned array equal to <code>(* frames-per-buffer channel-count)</code>.<break/><arg arg="pa-stream">A object of stream previously created with <fun id="portaudio__fun__open-stream">open-stream</fun>.</arg><break/><return>
On success array of data will be returned, or :input-overflowed if input data was discarded by PortAudio after the previous call and before this call. </return></documentation-string></function-definition><function-definition id="portaudio__fun__separate-array-to-channels" name="separate-array-to-channels" package="portaudio"><lambda-list><elt>pa-stream</elt><elt>array</elt></lambda-list><documentation-string>Separate flat array<break/><arg arg="pa-stream">A object of stream previously created with <fun id="portaudio__fun__open-stream">open-stream</fun>.</arg><arg arg="array">Flat array, that is received from <fun id="portaudio__fun__read-stream">read-stream</fun>.</arg><break/><return>
 (channelcount)-dimensional array of single-floats</return></documentation-string></function-definition><function-definition id="portaudio__fun__is-stream-stopped" name="is-stream-stopped" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list><documentation-string>Determine whether the stream is stopped. A stream is considered to be stopped prior to a successful call to <fun id="portaudio__fun__start-stream">start-stream</fun> and after a successful call to <fun id="portaudio__fun__stop-stream">stop-stream</fun> or <fun id="portaudio__fun__abort-stream">abort-stream</fun>.<break/><return>
Returns one (1) when the stream is stopped, zero (0) when the stream is running or, raises an error if PortAudio is not initialized or an error is encountered.</return></documentation-string></function-definition><function-definition id="portaudio__fun__device-info-max-output-channels" name="device-info-max-output-channels" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>maximum number of output channels</documentation-string></function-definition><function-definition id="portaudio__fun__get-device-info" name="get-device-info" package="portaudio"><lambda-list><elt>device</elt></lambda-list><documentation-string>Retrieve <class id="portaudio__class__device-info">device-info</class> structure containing information about the specified device.<break/><return>A object of <class id="portaudio__class__device-info">device-info</class>. If the device parameter is out of range the function returns NIL.</return><break/><arg arg="device">A valid device index in the range 0 to <code>(- (<fun id="portaudio__fun__get-device-count">get-device-count</fun>) 1)</code></arg></documentation-string></function-definition><function-definition id="portaudio__fun__merge-channels-into-array" name="merge-channels-into-array" package="portaudio"><lambda-list><elt>pa-stream</elt><elt>channels</elt></lambda-list><documentation-string>Merge subarrays of (channelcount)-dimensional array to flat array.<break/><arg arg="pa-stream">A object of stream previously created with <fun id="portaudio__fun__open-stream">open-stream</fun>.</arg><arg arg="channels">Vector of vectors of floats, that contains data for all sound channels.</arg><break/><return>Vector of data, that can be used with <fun id="portaudio__fun__write-stream">write-stream</fun>.</return></documentation-string></function-definition><function-definition id="portaudio__fun__initialize" name="initialize" package="portaudio"><lambda-list/><documentation-string>Library initialization function - call this before using PortAudio. This function initializes internal data structures and prepares underlying host APIs for use. With the exception of <fun id="portaudio__fun__get-version">get-version</fun>, <fun id="portaudio__fun__get-version-text">get-version-text</fun>, and <fun id="portaudio__fun__get-error-text">get-error-text</fun>, this function MUST be called before using any other PortAudio API functions.<break/>If initialize is called multiple times, each successful call must be matched with a corresponding call to <fun id="portaudio__fun__terminate">terminate</fun>. Pairs of calls to initialize/<fun id="portaudio__fun__terminate">terminate</fun> may overlap, and are not required to be fully nested.<break/>Note that if initialize raises an error, <fun id="portaudio__fun__terminate">terminate</fun> should NOT be called.<break/><result>NIL if successful, otherwise raises an error indicating the cause of failure.</result></documentation-string></function-definition><function-definition id="portaudio__fun__device-info-default-low-input-latency" name="device-info-default-low-input-latency" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>Default latency values for interactive performance.</documentation-string></function-definition><function-definition id="portaudio__fun__get-stream-write-available" name="get-stream-write-available" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list><documentation-string>Retrieve the number of frames that can be written to the stream without waiting.<break/><return>
A non-negative value representing the maximum number of frames that can be written to the stream without blocking or busy waiting or, raises an error if PortAudio is not initialized or an error is encountered. </return></documentation-string></function-definition><function-definition id="portaudio__fun__stream-info-output-latency" name="stream-info-output-latency" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>The output latency of the stream in seconds. This value provides the most accurate estimate of output latency available to the implementation. It may differ significantly from the suggestedLatency value passed to open-stream. The value of this field will be zero (0.) for input-only streams.</documentation-string></function-definition><function-definition id="portaudio__fun__host-api-info-device-count" name="host-api-info-device-count" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>The number of devices belonging to this host API. This field may be used in conjunction with host-api-device-index-to-device-index to enumerate all devices for this host API.</documentation-string></function-definition><function-definition id="portaudio__fun__get-version" name="get-version" package="portaudio"><lambda-list/><documentation-string>Retrieve the release number of the currently running PortAudio build, eg 1900.</documentation-string></function-definition><function-definition id="portaudio__fun__make-stream-parameters" name="make-stream-parameters" package="portaudio"><lambda-list/><documentation-string>Make stream-parameters object</documentation-string></function-definition><function-definition id="portaudio__fun__open-default-stream" name="open-default-stream" package="portaudio"><lambda-list><elt>num-input</elt><elt>num-output</elt><elt>sample-format</elt><elt>sample-rate</elt><elt>frames-per-buffer</elt></lambda-list><documentation-string>A simplified version of <fun id="portaudio__fun__open-stream">open-stream</fun> that opens the default input and/or output devices.<break/><arg arg="num-input-channels">The number of channels of sound that will be returned by <fun id="portaudio__fun__read-stream">read-stream</fun>. It can range from 1 to the value of max-input-channels in the <class id="portaudio__class__device-info">device-info</class> class for the default input device. If 0 the stream is opened as an output-only stream.</arg><arg arg="num-output-channels">The number of channels of sound to be passed to <fun id="portaudio__fun__write-stream">write-stream</fun>. It can range from 1 to the value of max-output-channels in the <class id="portaudio__class__device-info">device-info</class> class for the default output device. If 0 the stream is opened as an output-only stream.</arg><arg arg="sample-format">The sample format of both the input and output buffers passed to and from <fun id="portaudio__fun__read-stream">read-stream</fun> and <fun id="portaudio__fun__write-stream">write-stream</fun>. sample-format may be any of the formats described by the sample-format enumeration.</arg><arg arg="sample-rate">Same as <fun id="portaudio__fun__open-stream">open-stream</fun> parameter of the same name.</arg><arg arg="frames-per-buffer">Same as <fun id="portaudio__fun__open-stream">open-stream</fun> parameter of the same name.</arg><break/><result>As for <fun id="portaudio__fun__open-stream">open-stream</fun></result></documentation-string></function-definition><function-definition id="portaudio__fun__host-error-info-error-code" name="host-error-info-error-code" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>the error code returned</documentation-string></function-definition><function-definition id="portaudio__fun__read-stream-into-array" name="read-stream-into-array" package="portaudio"><lambda-list><elt>pa-stream</elt><elt>array</elt></lambda-list><documentation-string>Read samples from an input stream. The function doesn't return until the entire buffer has been filled - this may involve waiting for the operating system to supply the data. <break/><arg arg="pa-stream">A object of stream previously created with <fun id="portaudio__fun__open-stream">open-stream</fun>.</arg><arg arg="array">Simple array with has element-type equal to sample-format from <fun id="portaudio__fun__open-stream">open-stream</fun>. Size of array equal to <code>(* frames-per-buffer channel-count)</code>.</arg><break/><return>
On success NIL will be returned, or :input-overflowed if input data was discarded by PortAudio after the previous call and before this call. </return></documentation-string></function-definition><class-definition id="portaudio__class__pa-stream" name="pa-stream" package="portaudio"><cpl><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string>A single PaStream can provide multiple channels of real-time streaming audio input and output to a client application. A stream provides access to audio hardware represented by one or more devices. Depending on the underlying Host API, it may be possible to open multiple streams using the same device, however this behavior is implementation defined. Portable applications should assume that a device may be simultaneously used by at most one stream.</documentation-string></class-definition><function-definition id="portaudio__fun__pa-stream-input-channels" name="pa-stream-input-channels" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>Number of input channels</documentation-string></function-definition><macro-definition id="portaudio__fun__with-default-audio-stream" name="with-default-audio-stream" package="portaudio"><lambda-list><elt>(var num-input num-output &amp;key (sample-format float) (sample-rate 44100.0d0)
 (frames-per-buffer 1024))</elt><elt>&amp;body</elt><elt>body</elt></lambda-list><documentation-string>Execute body with opened and started stream VAR and shut down   the stream after it is done. It is required use these macro in with-audio or initialize/terminate environment.</documentation-string></macro-definition><class-definition id="portaudio__class__host-api-info" name="host-api-info" package="portaudio"><cpl><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string>A structure containing information about a particular host API.</documentation-string></class-definition><function-definition id="portaudio__fun__get-stream-info" name="get-stream-info" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list><documentation-string>Retrieve a object of class <class id="portaudio__class__stream-info">stream-info</class> containing information about the specified stream.<break/><return>A object of <class id="portaudio__class__stream-info">stream-info</class> structure. If the stream parameter invalid, or an error is encountered, the function returns NIL.</return><break/><arg arg="pa-stream">A object of stream previously created with <fun id="portaudio__fun__open-stream">open-stream</fun>.</arg></documentation-string></function-definition><function-definition id="portaudio__fun__device-info-default-sample-rate" name="device-info-default-sample-rate" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>Sample rate</documentation-string></function-definition><function-definition id="portaudio__fun__pa-stream-input-sample-format" name="pa-stream-input-sample-format" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>value of sample-format for input channel</documentation-string></function-definition><function-definition id="portaudio__fun__stream-info-input-latency" name="stream-info-input-latency" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>The input latency of the stream in seconds. This value provides the most accurate estimate of input latency available to the implementation. It may differ significantly from the suggestedLatency value passed to open-stream. The value of this field will be zero (0.) for output-only streams.</documentation-string></function-definition><function-definition id="portaudio__fun__host-api-type-id-to-host-api-index" name="host-api-type-id-to-host-api-index" package="portaudio"><lambda-list><elt>type</elt></lambda-list><documentation-string>Convert a static host API unique identifier, into a runtime host API index.<arg arg="type">A unique host API identifier belonging to the PaHostApiTypeId enumeration.</arg><break/><return>A valid host-api-idnex ranging from 0 to <code>(- (<fun id="portaudio__fun__get-host-api-count">get-host-api-count</fun>) 1)</code> or, raises an error if PortAudio is not initialized or</return><break/>
The host-api-not-found error indicates that the host API specified by the type parameter is not available.<break/></documentation-string></function-definition><function-definition id="portaudio__fun__host-api-info-default-input-device" name="host-api-info-default-input-device" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>The default input device for this host API. The value will be a device index ranging from 0 to (- (get-device-count) 1), or no-device if no default input device is available.</documentation-string></function-definition><function-definition id="portaudio__fun__stream-info-sample-rate" name="stream-info-sample-rate" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>The sample rate of the stream in Hertz (samples per second). In cases where the hardware sample rate is inaccurate and PortAudio is aware of it, the value of this field may be different from the sample-rate parameter passed to open-stream. If information about the actual hardware sample rate is not available, this field will have the same value as the sample-rate parameter passed to open-stream.</documentation-string></function-definition><function-definition id="portaudio__fun__host-api-info-default-output-device" name="host-api-info-default-output-device" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>The default output device for this host API. The value will be a device index ranging from 0 to (- (get-device-count) 1), or paNoDevice if no default output device is available.</documentation-string></function-definition><function-definition id="portaudio__fun__get-host-api-count" name="get-host-api-count" package="portaudio"><lambda-list/><documentation-string>Retrieve the number of available host APIs. Even if a host API is available it may have no devices available.<return>
A non-negative value indicating the number of available host APIs or, raises an error if PortAudio is not initialized or an error is encountered.</return></documentation-string></function-definition><macro-definition id="portaudio__fun__with-audio" name="with-audio" package="portaudio"><lambda-list><elt>&amp;body</elt><elt>body</elt></lambda-list><documentation-string>Execute body in PortAudio initialize/terminate environment.</documentation-string></macro-definition><function-definition id="portaudio__fun__stream-parameters-sample-format" name="stream-parameters-sample-format" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>The sample format of the buffer provided to read-stream or write-stream.</documentation-string></function-definition><function-definition id="portaudio__fun__abort-stream" name="abort-stream" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list><documentation-string>Terminates audio processing immediately without waiting for pending buffers to complete.</documentation-string></function-definition><function-definition id="portaudio__fun__stream-parameters-channel-count" name="stream-parameters-channel-count" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>The number of channels of sound to be delivered to the stream callback.</documentation-string></function-definition><function-definition id="portaudio__fun__get-stream-read-available" name="get-stream-read-available" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list><documentation-string>Retrieve the number of frames that can be read from the stream without waiting.<break/><return>
Returns a non-negative value representing the maximum number of frames that can be read from the stream without blocking or busy waiting or, raises an error if PortAudio is not initialized or an error is encountered.</return></documentation-string></function-definition><function-definition id="portaudio__fun__host-error-info-error-text" name="host-error-info-error-text" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>a textual description of the error if available, otherwise a zero-length string</documentation-string></function-definition><function-definition id="portaudio__fun__terminate" name="terminate" package="portaudio"><lambda-list/><documentation-string>Library termination function - call this when finished using PortAudio. This function deallocates all resources allocated by PortAudio since it was initialized by a call to <fun id="portaudio__fun__initialize">initialize</fun>. In cases where <fun id="portaudio__fun__initialize">initialize</fun> has been called multiple times, each call must be matched with a corresponding call to terminate. The final matching call to terminate will automatically close any PortAudio streams that are still open.<break/>
terminate MUST be called before exiting a program which uses PortAudio. Failure to do so may result in serious resource leaks, such as audio devices not being available until the next reboot.<break/><return>
NIL if successful, otherwise raises an error indicating the cause of failure.</return></documentation-string></function-definition><function-definition id="portaudio__fun__pa-stream-output-channels" name="pa-stream-output-channels" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>Number of output channels</documentation-string></function-definition><function-definition id="portaudio__fun__device-info-max-input-channels" name="device-info-max-input-channels" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>maximum number of input channels</documentation-string></function-definition><function-definition id="portaudio__fun__pa-stream-output-sample-format" name="pa-stream-output-sample-format" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>value of sample-format for output channel</documentation-string></function-definition><class-definition id="portaudio__class__device-info" name="device-info" package="portaudio"><cpl><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><documentation-string>A structure providing information and capabilities of PortAudio devices. Devices may support input, output or both input and output.</documentation-string></class-definition><function-definition id="portaudio__fun__device-info-default-high-input-latency" name="device-info-default-high-input-latency" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>Default latency values for robust non-interactive applications (eg. playing sound files).</documentation-string></function-definition><function-definition id="portaudio__fun__close-stream" name="close-stream" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list><documentation-string>Closes an audio stream. If the audio stream is active it discards any pending buffers as if <fun id="portaudio__fun__abort-stream">abort-stream</fun> had been called.</documentation-string></function-definition><function-definition id="portaudio__fun__pa-stream-frames-per-buffer" name="pa-stream-frames-per-buffer" package="portaudio"><lambda-list><elt>instance</elt></lambda-list><documentation-string>Frames per buffer for current stream</documentation-string></function-definition><macro-definition id="portaudio__fun__with-audio-stream" name="with-audio-stream" package="portaudio"><lambda-list><elt>(var input-parameters output-parameters &amp;key (sample-rate 44100.0d0)
 (frames-per-buffer 1024) (stream-flags (list no-flag)))</elt><elt>&amp;body</elt><elt>body</elt></lambda-list><documentation-string>Execute body with opened and started stream VAR and shut down   the stream after it is done. It is required use these macro in with-audio or initialize/terminate environment.</documentation-string></macro-definition><function-definition id="portaudio__fun__open-stream" name="open-stream" package="portaudio"><lambda-list><elt>input-parameters</elt><elt>output-parameters</elt><elt>sample-rate</elt><elt>frames-per-buffer</elt><elt>stream-flags</elt></lambda-list><documentation-string>
Opens a stream for either input, output or both.<break/><arg arg="input-parameters">A structure that describes the input parameters used by the opened stream. See <class id="portaudio__class__stream-parameters">stream-parameters</class> for a description of these parameters. input-parameters must be NIL for output-only streams.</arg><arg arg="output-parameters">A structure that describes the output parameters used by the opened stream. See <class id="portaudio__class__stream-parameters">stream-parameters</class> for a description of these parameters. output-parameters must be NIL for input-only streams.</arg><arg arg="sample-rate">The desired sample-rate. For full-duplex streams it is the sample rate for both input and output</arg><arg arg="frames-per-buffer">Preferred block granularity for a blocking read/write stream.</arg><arg arg="stream-flags">List of flags which modify the behavior of the streaming process. Some flags may only be relevant to certain buffer formats.</arg><break/><return>Upon success pen-stream returns object of <class id="portaudio__class__pa-stream">pa-stream</class> class. The stream is inactive (stopped). If a call to open-stream fails, an error code is raised and the value of stream is NIL.</return></documentation-string></function-definition><function-definition id="portaudio__fun__print-devices" name="print-devices" package="portaudio"><lambda-list/><documentation-string>List available sound devices, including device information.</documentation-string></function-definition><function-definition id="portaudio__fun__get-host-api-info" name="get-host-api-info" package="portaudio"><lambda-list><elt>host-api</elt></lambda-list><documentation-string>Retrieve a pointer to a structure containing information about a specific host Api.<break/><arg arg="host-api">A valid host API index ranging from 0 to <code>(- (<fun id="portaudio__fun__get-host-api-count">get-host-api-count</fun>) 1)</code></arg><break/><return>An object of <class id="portaudio__class__host-api-info">host-api-info</class> describing a specific host API. If the hostApi parameter is out of range or an error is encountered, the function returns NIL.</return></documentation-string></function-definition><function-definition id="portaudio__fun__get-default-input-device" name="get-default-input-device" package="portaudio"><lambda-list/><documentation-string>Retrieve the index of the default input device. The result can be used in the inputDevice parameter to <fun id="portaudio__fun__open-stream">open-stream</fun>.<return>
The default input device index for the default host API, or raise no-device if no default input device is available or an error was encountered. </return></documentation-string></function-definition></external-symbols><internal-symbols><function-definition id="portaudio__fun___is-format-supported" name="%is-format-supported" package="portaudio"><lambda-list><elt>input-parameters</elt><elt>output-parameters</elt><elt>sample-rate</elt></lambda-list></function-definition><function-definition id="portaudio__fun___get-default-output-device" name="%get-default-output-device" package="portaudio"><lambda-list/></function-definition><function-definition id="portaudio__fun___get-stream-write-available" name="%get-stream-write-available" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list></function-definition><function-definition id="portaudio__fun___write-stream" name="%write-stream" package="portaudio"><lambda-list><elt>pa-stream</elt><elt>buffer</elt><elt>frames</elt></lambda-list></function-definition><function-definition id="portaudio__fun__stop-stream" name="stop-stream" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list><documentation-string>Terminates audio processing. It waits until all pending audio buffers have been played before it returns.</documentation-string></function-definition><function-definition id="portaudio__fun___get-default-input-device" name="%get-default-input-device" package="portaudio"><lambda-list/></function-definition><function-definition id="portaudio__fun__raise-if-error" name="raise-if-error" package="portaudio"><lambda-list><elt>err</elt></lambda-list><documentation-string>Check err and raise condition if it is needed</documentation-string></function-definition><function-definition id="portaudio__fun___get-host-api-count" name="%get-host-api-count" package="portaudio"><lambda-list/></function-definition><function-definition id="portaudio__fun___get-stream-read-available" name="%get-stream-read-available" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list></function-definition><function-definition id="portaudio__fun___get-sample-size" name="%get-sample-size" package="portaudio"><lambda-list><elt>format</elt></lambda-list></function-definition><variable-definition id="portaudio__variable__+format-is-supported+" name="+format-is-supported+" package="portaudio"/><function-definition id="portaudio__fun__pa-stream-handle" name="pa-stream-handle" package="portaudio"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="portaudio__fun___open-default-stream" name="%open-default-stream" package="portaudio"><lambda-list><elt>pa-stream</elt><elt>num-input-channels</elt><elt>num-output-channels</elt><elt>sample-format</elt><elt>sample-rate</elt><elt>frames-per-buffer</elt><elt>stream-callback</elt><elt>user-data</elt></lambda-list></function-definition><class-definition id="portaudio__class__p-host-api-info" name="p-host-api-info" package="portaudio"><cpl><superclass status="INTERNAL" name="enhanced-foreign-type" package="cffi"/><superclass status="INTERNAL" name="foreign-type-alias" package="cffi"/><superclass status="INTERNAL" name="foreign-type" package="cffi"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/></class-definition><function-definition id="portaudio__fun___pa-sleep" name="%pa-sleep" package="portaudio"><lambda-list><elt>msec</elt></lambda-list></function-definition><function-definition id="portaudio__fun___get-stream-info" name="%get-stream-info" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list></function-definition><function-definition id="portaudio__fun__host-api-info-struct-version" name="host-api-info-struct-version" package="portaudio"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="portaudio__fun___start-stream" name="%start-stream" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list></function-definition><function-definition id="portaudio__fun__get-last-host-error-info" name="get-last-host-error-info" package="portaudio"><lambda-list/><documentation-string>Return information about the last host error encountered. The error information returned by <fun id="portaudio__fun__get-last-host-error-info">get-last-host-error-info</fun> will never be modified asynchronously by errors occurring in other PortAudio owned threads.<break/>
This function is provided as a last resort, primarily to enhance debugging by providing clients with access to all available error information.<break/><return>
A structure constraining information about the host error. The values in this structure will only be valid if a PortAudio function has previously raise the unanticipated-host-error error code. </return></documentation-string></function-definition><function-definition id="portaudio__fun__is-format-supported" name="is-format-supported" package="portaudio"><lambda-list><elt>input-parameters</elt><elt>output-parameters</elt><elt>sample-rate</elt></lambda-list><documentation-string>Determine whether it would be possible to open a stream with the specified parameters.<break/><arg arg="input-parameters">A structure that describes the input parameters used to open a stream. The suggested-latency slot is ignored. See <class id="portaudio__class__stream-parameters">stream-parameters</class> for a description of these parameters. input-parameters must be NIL for output-only streams.</arg><arg arg="output-parameters">A structure that describes the output parameters used to open a stream. The suggested-latency field is ignored. See <class id="portaudio__class__stream-parameters">stream-parameters</class> for a description of these parameters. output-parameters must be NIL for input-only streams.</arg><arg arg="sample-rate">The required sampleRate. For full-duplex streams it is the sample rate for both input and output.</arg><break/><return>Returns 0 if the format is supported, and raises an error indicating why the format is not supported otherwise. The constant <variable id="portaudio__variable__+format-is-supported+">+format-is-supported+</variable> is provided to compare with the return value for success.</return></documentation-string></function-definition><function-definition id="portaudio__fun__print-supported-standard-sample-rates" name="print-supported-standard-sample-rates" package="portaudio"><lambda-list><elt>input-params</elt><elt>output-params</elt></lambda-list></function-definition><function-definition id="portaudio__fun___get-host-api-info" name="%get-host-api-info" package="portaudio"><lambda-list><elt>host-api</elt></lambda-list></function-definition><function-definition id="portaudio__fun___terminate" name="%terminate" package="portaudio"><lambda-list/></function-definition><function-definition id="portaudio__fun___get-last-host-error-info" name="%get-last-host-error-info" package="portaudio"><lambda-list/></function-definition><function-definition id="portaudio__fun___get-device-info" name="%get-device-info" package="portaudio"><lambda-list><elt>device</elt></lambda-list></function-definition><class-definition id="portaudio__class__p-stream-info" name="p-stream-info" package="portaudio"><cpl><superclass status="INTERNAL" name="enhanced-foreign-type" package="cffi"/><superclass status="INTERNAL" name="foreign-type-alias" package="cffi"/><superclass status="INTERNAL" name="foreign-type" package="cffi"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/></class-definition><variable-definition id="portaudio__variable__+frames-per-buffer-unspecified+" name="+frames-per-buffer-unspecified+" package="portaudio"/><function-definition id="portaudio__fun___get-stream-time" name="%get-stream-time" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list></function-definition><variable-definition id="portaudio__variable__+use-host-api-specific-device-specification" name="+use-host-api-specific-device-specification" package="portaudio"/><function-definition id="portaudio__fun__stream-info-struct-version" name="stream-info-struct-version" package="portaudio"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="portaudio__fun___get-version" name="%get-version" package="portaudio"><lambda-list/></function-definition><function-definition id="portaudio__fun___host-api-device-index-to-device-index" name="%host-api-device-index-to-device-index" package="portaudio"><lambda-list><elt>host-api</elt><elt>host-api-device-index</elt></lambda-list></function-definition><function-definition id="portaudio__fun___read-stream" name="%read-stream" package="portaudio"><lambda-list><elt>pa-stream</elt><elt>buffer</elt><elt>frames</elt></lambda-list></function-definition><function-definition id="portaudio__fun___initialize" name="%initialize" package="portaudio"><lambda-list/></function-definition><function-definition id="portaudio__fun___get-default-host-api" name="%get-default-host-api" package="portaudio"><lambda-list/></function-definition><class-definition id="portaudio__class__p-pa-stream" name="p-pa-stream" package="portaudio"><cpl><superclass status="INTERNAL" name="enhanced-foreign-type" package="cffi"/><superclass status="INTERNAL" name="foreign-type-alias" package="cffi"/><superclass status="INTERNAL" name="foreign-type" package="cffi"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/></class-definition><function-definition id="portaudio__fun___get-device-count" name="%get-device-count" package="portaudio"><lambda-list/></function-definition><variable-definition id="portaudio__variable__+no-device+" name="+no-device+" package="portaudio"/><function-definition id="portaudio__fun___stop-stream" name="%stop-stream" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list></function-definition><function-definition id="portaudio__fun___host-api-type-id-to-host-api-index" name="%host-api-type-id-to-host-api-index" package="portaudio"><lambda-list><elt>type</elt></lambda-list></function-definition><class-definition id="portaudio__class__p-device-info" name="p-device-info" package="portaudio"><cpl><superclass status="INTERNAL" name="enhanced-foreign-type" package="cffi"/><superclass status="INTERNAL" name="foreign-type-alias" package="cffi"/><superclass status="INTERNAL" name="foreign-type" package="cffi"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/></class-definition><function-definition id="portaudio__fun___is-stream-stopped" name="%is-stream-stopped" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list></function-definition><function-definition id="portaudio__fun___open-stream" name="%open-stream" package="portaudio"><lambda-list><elt>pa-stream</elt><elt>input-parameters</elt><elt>output-parameters</elt><elt>sample-rate</elt><elt>frames-per-buffer</elt><elt>stream-flags</elt><elt>stream-callback</elt><elt>user-data</elt></lambda-list></function-definition><function-definition id="portaudio__fun___abort-stream" name="%abort-stream" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list></function-definition><function-definition id="portaudio__fun___get-version-text" name="%get-version-text" package="portaudio"><lambda-list/></function-definition><function-definition id="portaudio__fun__cffi-type-to-lisp" name="cffi-type-to-lisp" package="portaudio"><lambda-list><elt>cffi-type</elt></lambda-list></function-definition><function-definition id="portaudio__fun___is-stream-active" name="%is-stream-active" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list></function-definition><class-definition id="portaudio__class__p-host-error-info" name="p-host-error-info" package="portaudio"><cpl><superclass status="INTERNAL" name="enhanced-foreign-type" package="cffi"/><superclass status="INTERNAL" name="foreign-type-alias" package="cffi"/><superclass status="INTERNAL" name="foreign-type" package="cffi"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/></class-definition><function-definition id="portaudio__fun__device-info-struct-version" name="device-info-struct-version" package="portaudio"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="portaudio__fun___get-error-text" name="%get-error-text" package="portaudio"><lambda-list><elt>error-code</elt></lambda-list></function-definition><function-definition id="portaudio__fun___close-stream" name="%close-stream" package="portaudio"><lambda-list><elt>pa-stream</elt></lambda-list></function-definition><macro-definition id="portaudio__fun__make-errors" name="make-errors" package="portaudio"><lambda-list><elt>&amp;rest</elt><elt>symbols</elt></lambda-list></macro-definition><class-definition id="portaudio__class__p-stream-parameters" name="p-stream-parameters" package="portaudio"><cpl><superclass status="INTERNAL" name="enhanced-foreign-type" package="cffi"/><superclass status="INTERNAL" name="foreign-type-alias" package="cffi"/><superclass status="INTERNAL" name="foreign-type" package="cffi"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/></class-definition></internal-symbols></package><package name="portaudio-tests" id="portaudio-tests"><documentation-string>This package contains tests/examples for PortAudio bindings.</documentation-string><external-symbols><function-definition id="portaudio-tests__fun__test-read-write-converted-echo" name="test-read-write-converted-echo" package="portaudio-tests"><lambda-list/><documentation-string>Record input into an array; Separate array to channels; Merge channels into array; Play last array.</documentation-string></function-definition><function-definition id="portaudio-tests__fun__test-read-write-echo" name="test-read-write-echo" package="portaudio-tests"><lambda-list/><documentation-string>Record input into an array; Playback recorded data.</documentation-string></function-definition></external-symbols><internal-symbols><variable-definition id="portaudio-tests__variable__+num-channels+" name="+num-channels+" package="portaudio-tests"/><variable-definition id="portaudio-tests__variable__+sample-format+" name="+sample-format+" package="portaudio-tests"/><variable-definition id="portaudio-tests__variable__+seconds+" name="+seconds+" package="portaudio-tests"/><variable-definition id="portaudio-tests__variable__+frames-per-buffer+" name="+frames-per-buffer+" package="portaudio-tests"/><variable-definition id="portaudio-tests__variable__+sample-rate+" name="+sample-rate+" package="portaudio-tests"/></internal-symbols></package></documentation>