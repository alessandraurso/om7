; OM File Header - Saved 2009/10/26 10:58:19
; (6.0011 :patc (om-make-point 125 143) (om-make-point 846 117) (om-make-point 869 889) "No documentation " 183 0 nil "2009/10/26 10:58:19")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../OM-SRC/OPENMUSIC/userlibrary/repmus/resources/sound/Take 6.aiff") (list (quote :sdif) "../../../../OM-SRC/OPENMUSIC/userlibrary/repmus/resources/analysis/take6.cseq.sdif"))
(in-package :om)(load-lib-for (quote ("repmus")))(setf *om-current-persistent* (om-load-patch1 "repmus-ex" (quote ((om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 192 90) (om-make-point 100 96) (let ((newobj (om-load-if (make-pathname :directory (quote (:absolute "Users" "bresson" "OM-SRC" "OPENMUSIC" "userlibrary" "repmus" "resources" "analysis")) :device nil :name "take6.cseq" :type "sdif") (quote load-sdif-file)))) newobj) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 276 53) (quote "- Imported from AudioSculpt$or$- Generated in OM using the OM-Supervp library") "" (om-make-point 301 106) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 157 37) (quote "Partial tracking analysis file$(SDIFFILE)") "" (om-make-point 17 111) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 80 40) (quote "Original Sound") "" (om-make-point 541 18) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SOUND1" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 389 12) (om-make-point 143 80) (let ((newobj (let ((thesound (load-sound (make-pathname :directory (quote (:absolute "Users" "bresson" "OM-SRC" "OPENMUSIC" "userlibrary" "repmus" "resources" "sound")) :device :unspecific :name "Take 6" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode player)) (list nil nil (quote t) 1 0 (om-make-point 40 10) (om-make-point 781 381) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "CHSEQ->POLY1" (quote chseq->poly) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CHSEQ" nil) (om-load-inputfun (quote input-funbox) "no documentation" "APPROX" 2))) (om-make-point 125 597) nil nil nil "lien-harmonique" 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 421 438) (om-make-point 38 30) (list 60) "(60)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 39 284) (om-make-point 358 113) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4996 6606 7808 5708 7602) (6612 5000 5712 6406 7600) (7812 6618 7628 7392 9010) (6618 7820 4584 7280 5396) (7814 4578 6612 9016 7296) (6414 7618 4588 5384 7496) (7808 4694 6604 7398 8508) (6606 7808 9010 5922 4882) (7810 6608 4628 9010 8506) (6410 4526 5522 5710 6712) (4480 6414 5704 5518 7808) (4416 5396 6396 7598 7212) (7412 6200 9314 8998 8112) (8312 7114 9016 7998 4292) (6728 6468 4318 5196 9016) (8310 7304 7106 6602 4286) (6916 6410 6102 4216 5222) (6532 6156 4834 5476 5742) (7818 9012 4696 6614 8520) (7816 9012 6612 7404 7600) (7816 4524 9012 6618 8112) (4408 7620 6420 8818 7814) (4406 6212 7420 8620 7104) (7822 4514 6630 9034 5482) (8116 4508 6916 6608 7412))) :lonset (quote (0 1780 2620 3420 4210 5350 8250 9060 10320 11910 12320 12370 13280 14130 16700 16740 17590 19370 19530 20050 20380 20720 23920 24830 25760 26690)) :ldur (quote ((1780 1780 1780 1780 1780) (840 840 840 840 840) (800 800 800 800 800) (790 790 790 790 790) (1140 1140 1140 1140 1140) (2900 2900 2900 2900 2900) (810 810 810 810 810) (1260 1260 1260 1260 1260) (1590 1590 1590 1590 1590) (410 410 410 410 410) (50 50 50 50 50) (910 910 910 910 910) (850 850 850 850 850) (2570 2570 2570 2570 2570) (40 40 40 40 40) (850 850 850 850 850) (1780 1780 1780 1780 1780) (160 160 160 160 160) (520 520 520 520 520) (330 330 330 330 330) (340 340 340 340 340) (3200 3200 3200 3200 3200) (910 910 910 910 910) (930 930 930 930 930) (2300 2300 2300 2300 2300))) :lvel (quote ((69 64 63 58 55) (91 69 64 53 47) (67 61 59 57 53) (68 66 61 50 50) (61 56 55 52 50) (60 59 55 48 47) (80 71 70 62 56) (80 76 62 56 56) (95 64 60 58 50) (84 70 56 51 50) (69 48 46 44 43) (65 61 58 55 52) (84 59 48 47 47) (76 68 65 65 61) (77 67 59 51 48) (78 63 60 60 60) (81 61 58 57 53) (58 58 49 45 43) (89 78 68 64 57) (98 80 78 61 57) (118 91 78 67 61) (82 78 68 65 57) (78 65 54 53 53) (85 83 64 63 53) (81 70 56 54 51))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport approx fontsize staff cmnpref deltapict player)) (list nil nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 42) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 118) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 1) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 0) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 12700) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 4) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 5))) (om-make-point 118 209) (om-make-point 122 61) nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 545 437) (om-make-point 35 30) 200 "200" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 330 430) (om-make-point 56 30) (list 0 260) "(0 260)" nil) (om-load-editor-box1 "CHORD-SEQ2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 203 659) (om-make-point 389 102) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (6600) (7800) (5700) (7600) (6400) (7400) (7800) (9000) (7300) (5400) (4600) (9000) (7600) (6400) (7500) (5400) (7400) (4700) (6600) (7800) (8500) (4900) (9000) (5900) (4600) (8500) (4500) (6700) (6400) (5700) (5500) (7800) (4400) (5400) (7600) (7200) (7400) (6200) (8100) (9000) (9300) (8000) (7100) (8300) (4300) (6700) (6500) (5200) (6600) (7100) (8300) (7300) (4200) (6900) (6400) (6100) (5200) (6200) (6500) (5500) (5700) (4800) (6600) (4700) (7800) (8500) (9000) (7600) (7400) (8100) (4500) (4400) (8800) (6400) (7600) (8600) (7400) (6200) (7100) (4500) (7800) (9000) (6600) (5500) (8100) (7400) (6900))) :lonset (quote (0 0 0 0 0 1300 2080 2340 2600 3120 3380 3640 4940 5460 5720 5980 6240 6500 6760 7020 7280 7540 8060 8320 8580 9360 9620 9880 10140 10400 10660 10920 12220 12740 13000 13260 13520 13780 14040 14300 14560 14820 15340 15600 15860 16120 16640 16900 17160 17680 17940 18200 18460 18720 18980 19240 19500 19760 20020 20280 20540 20800 21060 21320 21580 21840 22100 22360 23140 23400 23920 24180 24700 24960 25220 25480 26000 26260 26520 26780 27040 27300 27560 27820 28080 28860 29120 29380 29640)) :ldur (quote ((2600) (5720) (1300) (2340) (3380) (780) (1040) (3120) (1040) (2860) (1560) (3120) (1300) (1820) (1300) (520) (1300) (2080) (1300) (3120) (3120) (780) (1300) (2600) (1040) (520) (1040) (2860) (2080) (3640) (2860) (2080) (1040) (2080) (1560) (520) (780) (1820) (2080) (1040) (3640) (1040) (1560) (1040) (1300) (2600) (1040) (1040) (1300) (1560) (1040) (1560) (1040) (2340) (1820) (1040) (520) (780) (1820) (1040) (1560) (1560) (520) (3900) (1820) (4940) (1040) (2600) (780) (780) (1560) (520) (2340) (1040) (1300) (780) (1560) (1040) (1300) (1300) (2600) (1560) (1560) (1820) (1300) (780) (520) (260))) :lvel (quote ((60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60) (60))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player)) (list nil nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 233 473) (om-make-point 371 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4996 6606 7808 5708 7602) (4996 5708 6606 7600 7808) (5000 5708 6606 7600 7808) (5000 5712 6606 7600 7808) (5000 5712 6612 7600 7808) (5000 5712 6406 6612 7600) (5000 5712 6406 6618 7600) (5000 5712 6406 6618 7628) (5000 5712 6618 7392 7628) (5000 6618 7392 7628 7812) (6618 7392 7628 7812 9010) (6618 7392 7628 7820 9010) (6618 7280 7628 7820 9010) (5396 6618 7280 7820 9010) (4584 5396 6618 7280 7820) (4584 5396 6612 7280 7820) (4584 5396 6612 7280 7814) (4578 5396 6612 7280 7814) (4578 5396 6612 7296 7814) (4578 6612 7296 7814 9016) (4588 6612 7296 7814 9016) (4588 6612 7296 7618 9016) (4588 6414 7296 7618 9016) (4588 6414 7496 7618 9016) (4588 5384 6414 7496 7618) (4588 5384 6414 7398 7618) (4694 5384 6414 7398 7618) (4694 5384 6604 7398 7618) (4694 5384 6604 7398 7808) (4694 6604 7398 7808 8508) (4694 6606 7398 7808 8508) (4882 6606 7398 7808 8508) (4882 6606 7398 7808 9010) (4882 5922 6606 7808 9010) (4882 5922 6608 7808 9010) (4882 5922 6608 7810 9010) (4628 5922 6608 7810 9010) (4628 6608 7810 8506 9010) (4526 6608 7810 8506 9010) (4526 6712 7810 8506 9010) (4526 6410 6712 8506 9010) (4526 5710 6410 6712 9010) (4526 5522 5710 6410 6712) (4526 5522 5710 6414 6712) (4526 5518 5710 6414 6712) (4526 5518 5704 6414 6712) (4480 5518 5704 6414 6712) (4480 5518 5704 6414 7808) (4480 5518 5704 6396 7808) (4416 5518 5704 6396 7808) (4416 5396 5704 6396 7808) (4416 5396 5704 6396 7598) (4416 5396 6396 7212 7598) (4416 5396 6396 7212 7412) (4416 5396 6200 7212 7412) (4416 5396 6200 7412 8112) (4416 6200 7412 8112 8998) (6200 7412 8112 8998 9314) (6200 7412 8112 9016 9314) (6200 7412 7998 9016 9314) (6200 7114 7998 9016 9314) (6200 7114 7998 8312 9016) (4292 7114 7998 8312 9016) (4318 7114 7998 8312 9016) (4318 6728 7998 8312 9016) (4318 6468 6728 8312 9016) (4318 5196 6468 6728 9016) (4286 5196 6468 6728 9016) (4286 5196 6468 6602 9016) (4286 5196 6602 7106 9016) (4286 5196 6602 7106 8310) (4286 6602 7106 7304 8310) (4216 6602 7106 7304 8310) (4216 6602 6916 7304 8310) (4216 6410 6916 7304 8310) (4216 6102 6410 6916 8310) (4216 5222 6102 6410 6916) (4216 5222 6156 6410 6916) (4216 5222 6156 6532 6916) (4216 5476 6156 6532 6916) (4216 5476 5742 6156 6532) (4834 5476 5742 6156 6532) (4834 5476 5742 6156 6614) (4696 5476 5742 6156 6614) (4696 5476 5742 6614 7818) (4696 5742 6614 7818 8520) (4696 6614 7818 8520 9012) (4696 6614 7816 8520 9012) (4696 6612 7816 8520 9012) (4696 6612 7600 7816 9012) (6612 7404 7600 7816 9012) (6618 7404 7600 7816 9012) (6618 7404 7816 8112 9012) (4524 6618 7816 8112 9012) (4524 6618 7814 8112 9012) (4408 6618 7814 8112 9012) (4408 6618 7814 8112 8818) (4408 6420 7814 8112 8818) (4408 6420 7620 7814 8818) (4406 6420 7620 7814 8818) (4406 6420 7620 7814 8620) (4406 6420 7420 7814 8620) (4406 6212 7420 7814 8620) (4406 6212 7104 7420 8620) (4514 6212 7104 7420 8620) (4514 6212 7104 7822 8620) (4514 6212 7104 7822 9034) (4514 6630 7104 7822 9034) (4514 5482 6630 7822 9034) (4508 5482 6630 7822 9034) (4508 5482 6608 7822 9034) (4508 5482 6608 8116 9034) (4508 5482 6608 7412 8116) (4508 6608 6916 7412 8116))) :lonset (quoteldur (quotelvel (quoteloffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 200)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player)) (list nil nil (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "MUTATION" (quote mutation) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "CHORDS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "INOUT" "in"))) (om-make-point 62 401) nil nil nil nil 1))) (quote ((12 0 5 0 nil 0) (8 0 7 0 nil 0) (0 0 8 0 nil 0) (5 0 11 0 nil 0) (13 0 12 1 nil 0) (10 0 12 2 nil 0) (6 0 12 4 nil 0) (9 0 12 7 nil 0) (7 0 13 0 nil 0))) nil 6.0011))
