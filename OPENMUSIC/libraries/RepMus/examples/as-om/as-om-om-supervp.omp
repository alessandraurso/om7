; OM File Header - Saved 2009/10/26 10:40:50
; (6.0011 :patc (om-make-point 207 103) (om-make-point 50 50) (om-make-point 397 718) "non documentation" 183 0 nil "2009/10/26 10:40:30")
; End File Header
; External resources 
; (list (list (quote :sound) "../../../../../OM-SRC/OPENMUSIC/userlibrary/repmus/resources/sound/africa.aiff" "../../../../../OM-SRC/OPENMUSIC/userlibrary/repmus/resources/sound/africa.aiff"))
(in-package :om)(load-lib-for (quote ("repmus" "OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "as-om-om-supervp" (quote ((om-load-boxcomment "comment" (om-make-point 129 36) (quote "SUPERVP transient detection") "" (om-make-point 198 174) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 129 36) (quote "PM2 chord-seq analysis") "" (om-make-point 196 419) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 129 36) (quote "SOUND + Temporal markers") "" (om-make-point 145 301) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SOUND4" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 61 46) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (make-pathname :directory (quote (:absolute "Users" "bresson" "OM-SRC" "OPENMUSIC" "userlibrary" "repmus" "resources" "sound")) :device :unspecific :name "africa" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx microplay scale)) (list (quote :midishare) (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "TRANSIENT-DETECTION" (quote transient-detection) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "FILENAME" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRESHOLD" 3) (om-load-inputfun (quote input-funbox) "no documentation" "MINFREQ" 0.0) (om-load-inputfun (quote input-funbox) "no documentation" "MAXFREQ" 22050.0) (om-load-inputfun (quote input-funbox) "no documentation" "WINDOWSIZE" 4096) (om-load-inputfun (quote input-funbox) "no documentation" "FFTSIZE" 4096) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "STEP-OVERSAMP" 8 (list (list "1/4" 4) (list "1/8" 8) (list "1/16" 16) (list "1/32" 32))) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "WINDOWTYPE" "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputfun (quote input-funbox) "no documentation" "OUTFILE" "markers.sdif"))) (om-make-point 140 107) nil nil nil nil 1) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 59 295) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (make-pathname :directory (quote (:absolute "Users" "bresson" "OM-SRC" "OPENMUSIC" "userlibrary" "repmus" "resources" "sound")) :device :unspecific :name "africa" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote (0.023055073 0.26886418 0.42942405 0.5362198 0.64161075 0.8033918 0.94402087 1.2306519 1.3574993 1.6253237 1.7687093 1.8922879 2.0322626 2.2895825 2.429535 2.4926684 2.5647195 2.6957662 2.8216639 3.090669 3.331077 3.5178225 3.6239417 3.900708 4.172191 4.3071466 4.437919 4.70467 4.840932 4.988888 5.1200037)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems microplay scale)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "CHORD-SEQ-ANALYSIS" (quote chord-seq-analysis) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "BEGIN-T" nil) (om-load-inputfun (quote input-funbox) "no documentation" "END-T" nil) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "MAX-PARTIALS" 12) (om-load-inputfun (quote input-funbox) "no documentation" "AMP-TRESHOLD" -40) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "ANALYSIS-TYPE" "averaged-spectrum" (list (list "Averaged Spectrum" "averaged-spectrum") (list "Inharmonic Partial Averaging" "inharmonic-partial-averaging"))) (om-load-inputfun (quote input-funbox) "no documentation" "WINDOWSIZE" 4096) (om-load-inputfun (quote input-funbox) "no documentation" "FFTSIZE" 4096) (om-load-inputfunmenu1 (quote input-funmenu) "no documentation" "STEP" 256 (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputfun (quote input-funbox) "no documentation" "WINDOWTYPE" "hanning") (om-load-inputfun (quote input-funbox) "no documentation" "OUTFILE" "chordseqs.sdif"))) (om-make-point 83 360) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 50 580) (om-make-point 233 104) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6546 7192 5978 6786 6334) (6770 5974 7184 6326 7530 7970 6598) (6766 6326 7528 5964 7176 7970) (7188 5976 6778 6326 7534 6526 5164) (6544 5966 7186 6784 8442) (7190 5980 6326 7536 6552 6810) (5970 7188 7530 6320 6564) (6542 5970 7186) (6780 6330 5962 7534 7184 6574 7976) (6780 7530 6320 6542 5142) (6544 6186 7384 6782 6010) (5972 7188 6326 7528 6548) (5978 7188 7530 6318 6520) (5958 7182 6596) (6542 5978 7186 6814) (6782 5972 7188 6326 7536 6558 7978) (6544 6186 7384 6780 6010) (7188 5968 6328 7530 6552 6792) (5966 7188 6324 7528) (5964 7188 7530 6320 6538) (6542 5978 7188 6814) (7190 5998 6786 6556 6332 7544 7980) (6772 5960 6328 7182 7534 6530 7970 7342 7404) (6162 6784 7382 7530 6532) (6542 6178 7384 6790) (7194 5976 6322 6160 7530 6542 6810) (5970 7188 6320 7530) (6542 7188 5978 6776) (6782 5964 7536 6324 7180 7978 6494) (6780 6316 7532 6540) (6540 6180 7380 6790) (5980 7192 6324 7532 6544) (5968 7192 6534 6388) (6546 7190 5970 6798) (6778 5964 6324 7530 7182 7972) (7188 5974 6784 7532 6554 6330) (6546 7190 5974 6778) (6540 5960 7184) (7198 5988 6336 7542 6778 6610 6506) (5980 7188 6324 7530) (5970 7192 6588 6384) (6544 7190 5978) (6770 5964 6326 7530 7186 7970 6528) (6796 6564 6326 7536 5140) (6550 6174 7392 6788 8578))) :lonset (quote (20 150 210 270 430 540 640 800 940 1070 1230 1360 1490 1560 1630 1770 1890 2020 2090 2160 2290 2430 2490 2560 2700 2820 2920 3090 3240 3330 3520 3620 3820 3900 4050 4170 4310 4370 4440 4490 4640 4700 4840 4990 5120 5250)) :ldur (quote ((130 130 130 130 130) (60 60 60 60 60 60 60) (60 60 60 60 60 60) (160 160 160 160 160 160 160) (110 110 110 110 110) (100 100 100 100 100 100) (160 160 160 160 160) (140 140 140) (130 130 130 130 130 130 130) (160 160 160 160 160) (130 130 130 130 130) (130 130 130 130 130) (70 70 70 70 70) (70 70 70) (140 140 140 140) (120 120 120 120 120 120 120) (130 130 130 130 130) (70 70 70 70 70 70) (70 70 70 70) (130 130 130 130 130) (140 140 140 140) (60 60 60 60 60 60 60) (70 70 70 70 70 70 70 70 70) (140 140 140 140 140) (120 120 120 120) (100 100 100 100 100 100 100) (170 170 170 170) (150 150 150 150) (90 90 90 90 90 90 90) (190 190 190 190) (100 100 100 100) (200 200 200 200 200) (80 80 80 80) (150 150 150 150) (120 120 120 120 120 120) (140 140 140 140 140 140) (60 60 60 60) (70 70 70) (50 50 50 50 50 50 50) (150 150 150 150) (60 60 60 60) (140 140 140) (150 150 150 150 150 150 150) (130 130 130 130 130) (110 110 110 110 110))) :lvel (quote ((74 68 68 43 41) (88 67 62 55 49 43 42) (93 53 52 48 45 43) (68 64 47 43 42 42 41) (93 51 47 43 40) (71 67 58 55 46 42) (59 53 49 48 40) (83 68 67) (86 54 54 52 50 44 42) (49 44 44 41 41) (89 54 46 42 41) (69 68 55 50 41) (64 58 47 46 40) (50 44 42) (83 68 65 42) (72 57 52 48 46 45 41) (88 53 46 42 41) (64 63 56 47 46 41) (75 72 54 52) (57 51 43 43 41) (83 67 64 42) (66 66 65 58 47 44 40) (73 54 52 50 49 43 41 41 40) (51 47 44 43 42) (90 55 46 42) (77 77 50 48 47 45 42) (61 56 45 44) (81 72 67 42) (100 52 50 50 48 44 42) (53 44 43 42) (82 53 46 41) (68 66 52 49 43) (49 45 42 41) (79 72 70 44) (93 53 50 47 47 43) (69 67 45 42 42 42) (90 60 60 44) (75 46 43) (64 64 50 45 43 43 43) (69 63 56 54) (48 43 41 41) (81 74 71) (85 50 49 48 46 42 41) (43 42 42 41 40) (92 53 47 45 40))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems microplay scale)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 137 495) nil nil nil nil 1) (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 106 428) (om-make-point 70 50) (let ((newobj (make-instance (quote sdiffile)))) newobj) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil) (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 110 182) (om-make-point 70 50) (let ((newobj (make-instance (quote sdiffile)))) newobj) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil) (om-load-boxcall (quote genfun) "GET-MRK-ONSETS" (quote get-mrk-onsets) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 104 234) nil nil nil nil 1))) (quote ((3 0 4 0 nil 0) (3 0 5 0 nil 0) (11 0 5 2 nil 0) (5 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (6 0 9 0 nil 0) (4 0 10 0 nil 0) (10 0 11 0 nil 0))) nil 6.0011))
