; OM File Header - Saved 2009/10/26 10:40:50
; (6.0011 :patc (om-make-point 113 102) (om-make-point 199 85) (om-make-point 689 610) "No documentation " 183 0 nil "2009/10/26 10:40:30")
; End File Header
; External resources 
; (list (list (quote :sdif) "../../../in-files/africa.mrk.sdif") (list (quote :sound) "../../../../../OM-SRC/OPENMUSIC/userlibrary/repmus/resources/sound/africa.aiff"))
(in-package :om)(load-lib-for (quote ("repmus")))(setf *om-current-persistent* (om-load-patch1 "partial-tracking" (quote ((om-load-boxcomment "comment" (om-make-point 89 26) (quote "Original sound") "" (om-make-point 342 96) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 437 85) (om-make-point 155 67) (let ((newobj (let ((thesound (load-sound (make-pathname :directory (quote (:absolute "Users" "bresson" "OM-SRC" "OPENMUSIC" "userlibrary" "repmus" "resources" "sound")) :device :unspecific :name "africa" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale palette-mode microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems player)) (list nil 0 nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) (quote :midishare))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 308 55) (quote "- Imported from AudioSculpt$or$- Created in OM using the OM-Supervp library") "" (om-make-point 274 188) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 222 36) (quote "Partial tracking analysis file$(SDIFFILE)") "" (om-make-point 126 150) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 296 76) (quote "AS->OM : Converting a partial tracking analysis file into a CHORD-SEQ") "" (om-make-point 284 11) nil (om-make-color 59/255 5/51 1/17) (om-make-font "Arial" 18 :family "Arial" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 149 193) (om-make-point 86 69) (let ((newobj (om-load-if (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "africa.mrk" :type "sdif") (quote load-sdif-file)))) newobj) "x" nil (pairlis (quote (deltapict winsize winpos palette-mode obj-mode show-stems)) (list (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 302 268) (om-make-point 20 28) 6 "6" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 272 268) (om-make-point 20 28) 8 "8" nil) (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 50) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 1))) (om-make-point 217 299) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 92 393) (om-make-point 310 101) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6550 7198 5970) (5958 7188 6762 7526) (6766 7530 6332 5982 7176) (7190 5970 6794) (6540 5966 7188 5958) (7190 5952 6322 7534) (5944 7186 7530 6312) (5946 7184 6584) (6542 5978 7188) (6782 5950 7188 6600 7524 6336) (6780 6320 7530) (6544 6162 7380) (7186 5960 6308 7530) (5954 7188 6318 7530 6312) (5948) (6542 5980 7188) (6788 5950 7190 6320 7536) (6544 6162 7380 6738) (7186 5960 6308 7530) (5954 7190 6318 7532) (5954 7188 7530 6312) (6542 5980 7188 5948) (6796 5976 7190 6628 7536) (6784 5938 7188 6340 7534) (6770 7530 5972 6336 6190 7384) (6542 6162 7380) (7196 5974 7534) (5954 7188 6310 7530) (6544 7190 5984) (6774 5948 7176 6516 6310 7528) (6784 7536 6334 7978 5968) (6782 6314 7530) (6542 6164 7380) (7200 5962 7534) (5952 7188 6312 7530) (5972) (6548 7192 5974) (6542 7192 5972) (6788 5946 7186 6412 7526) (6778 6328 7532 5986) (7190 5976) (6552 7192 5972) (6536 5960) (5964 7196 6566 6308 7538) (5946 7188 6320 7532) (5960) (6544 7192 5978) (6764 5956 7194 7530 6304 6322))) :lonset (quote (0 80 200 280 430 540 670 740 810 950 1070 1230 1360 1450 1580 1630 1760 1870 2030 2110 2160 2250 2430 2480 2530 2700 2830 2920 3090 3220 3270 3340 3520 3630 3700 3840 3900 3950 4030 4100 4180 4300 4370 4420 4500 4640 4710 4850 4990)) :ldur (quote ((100 100 100) (120 120 120 120) (80 80 80 80 80) (150 150 150) (150 40 40 150) (130 130 130 130) (70 70 70 70) (100 30 100) (140 140 140) (140 20 140 20 140 140) (160 160 160) (130 130 130) (90 90 90 90) (170 170 40 170 170) (50) (130 130 130) (110 110 110 110 110) (190 190 190 30) (80 80 80 80) (50 50 50 50) (90 90 90 90) (220 220 220 40) (50 50 50 50 50) (50 50 50 50 50) (200 30 30 30 200 200) (130 130 130) (90 90 90) (170 170 170 170) (130 130 130) (80 80 80 30 80 80) (70 70 70 70 70) (80 80 80) (110 110 110) (70 70 70) (140 140 140 140) (60) (50 50 50) (80 80 80) (70 70 70 70 70) (80 80 80 80) (120 120) (70 70 70) (50 50) (100 100 20 100 100) (140 140 140 140) (70) (140 140 140) (180 40 40 180 40 180))) :lvel (quote ((80 62 59) (64 61 55 40) (80 47 46 43 41) (63 60 41) (92 52 50 41) (65 63 55 52) (56 51 48 47) (50 43 40) (77 62 61) (87 63 59 54 49 49) (44 41 40) (81 48 42) (63 63 53 45) (66 62 48 47 41) (42) (77 61 59) (70 55 50 46 43) (81 48 42 41) (63 63 53 45) (66 62 48 47) (56 50 41 41) (77 61 59 42) (61 59 58 52 41) (67 56 55 46 43) (63 47 47 46 46 40) (82 50 42) (72 72 44) (55 51 42 41) (80 67 61) (71 64 63 56 46 44) (100 47 47 42 42) (59 44 43) (75 48 42) (66 65 43) (59 55 46 45) (41) (80 69 61) (73 66 65) (73 59 52 47 41) (78 45 44 41) (64 63) (84 55 55) (73 45) (63 62 54 51 44) (63 57 51 50) (43) (75 68 65) (87 60 54 45 45 44))) :loffset (quote ((0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0) (0) (0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0) (0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1 1) (1) (1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1) (1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1) (1 1 1) (1 1) (1 1 1 1 1) (1 1 1 1) (1) (1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((nil nil nil) (nil nil nil nil) (nil nil nil nil nil) (nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil) (nil nil nil) (nil nil nil nil nil nil) (nil nil nil) (nil nil nil) (nil nil nil nil) (nil nil nil nil nil) (nil) (nil nil nil) (nil nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil) (nil nil nil) (nil nil nil nil) (nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil) (nil nil nil) (nil nil nil) (nil nil nil nil) (nil) (nil nil nil) (nil nil nil) (nil nil nil nil nil) (nil nil nil nil) (nil nil) (nil nil nil) (nil nil) (nil nil nil nil nil) (nil nil nil nil) (nil) (nil nil nil) (nil nil nil nil nil nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems player)) (list nil nil 0 0 8 28 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 259/50 nil 1000 0 18350450 2621450 (quote t) (quote :midishare))) t nil nil nil))) (quote ((5 0 8 0 nil 0) (7 0 8 6 nil 0) (6 0 8 7 nil 0) (8 0 9 0 nil 0))) nil 6.0011))
